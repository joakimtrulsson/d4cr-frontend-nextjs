# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  email: String
  password: PasswordState
  chapters(where: ChapterWhereInput! = {}, orderBy: [ChapterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChapterWhereUniqueInput): [Chapter!]
  chaptersCount(where: ChapterWhereInput! = {}): Int
  role: Role
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  chapters: ChapterManyRelationFilter
  role: RoleWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input ChapterManyRelationFilter {
  every: ChapterWhereInput
  some: ChapterWhereInput
  none: ChapterWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  email: String
  password: String
  chapters: ChapterRelateToManyForUpdateInput
  role: RoleRelateToOneForUpdateInput
}

input ChapterRelateToManyForUpdateInput {
  disconnect: [ChapterWhereUniqueInput!]
  set: [ChapterWhereUniqueInput!]
  create: [ChapterCreateInput!]
  connect: [ChapterWhereUniqueInput!]
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  email: String
  password: String
  chapters: ChapterRelateToManyForCreateInput
  role: RoleRelateToOneForCreateInput
}

input ChapterRelateToManyForCreateInput {
  create: [ChapterCreateInput!]
  connect: [ChapterWhereUniqueInput!]
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canCreateItems: Boolean
  canManageAllItems: Boolean
  canSeeOtherUsers: Boolean
  canEditOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  assignedTo(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canCreateItems: BooleanFilter
  canManageAllItems: BooleanFilter
  canSeeOtherUsers: BooleanFilter
  canEditOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canCreateItems: OrderDirection
  canManageAllItems: OrderDirection
  canSeeOtherUsers: OrderDirection
  canEditOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
}

input RoleUpdateInput {
  name: String
  canCreateItems: Boolean
  canManageAllItems: Boolean
  canSeeOtherUsers: Boolean
  canEditOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canCreateItems: Boolean
  canManageAllItems: Boolean
  canSeeOtherUsers: Boolean
  canEditOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Chapter {
  id: ID!
  title: String
  slug: String
  preamble: Chapter_preamble_Document
  heroImage: JSON
  chapterLanguage: String
  translatedChapters(where: ChapterWhereInput! = {}, orderBy: [ChapterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChapterWhereUniqueInput): [Chapter!]
  translatedChaptersCount(where: ChapterWhereInput! = {}): Int
  status: String
  sections: JSON
}

type Chapter_preamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ChapterWhereUniqueInput {
  id: ID
  slug: String
}

input ChapterWhereInput {
  AND: [ChapterWhereInput!]
  OR: [ChapterWhereInput!]
  NOT: [ChapterWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  chapterLanguage: StringNullableFilter
  translatedChapters: ChapterManyRelationFilter
  status: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input ChapterOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  chapterLanguage: OrderDirection
  status: OrderDirection
}

input ChapterUpdateInput {
  title: String
  slug: String
  preamble: JSON
  heroImage: JSON
  chapterLanguage: String
  translatedChapters: ChapterRelateToManyForUpdateInput
  status: String
  sections: JSON
}

input ChapterUpdateArgs {
  where: ChapterWhereUniqueInput!
  data: ChapterUpdateInput!
}

input ChapterCreateInput {
  title: String
  slug: String
  preamble: JSON
  heroImage: JSON
  chapterLanguage: String
  translatedChapters: ChapterRelateToManyForCreateInput
  status: String
  sections: JSON
}

type Page {
  id: ID!
  title: String
  slug: String
  heroPreamble: Page_heroPreamble_Document
  ctaOneAnchorText: String
  ctaOneUrl: JSON
  ctaTwoUrlAnchorText: String
  ctaTwoUrl: JSON
  status: String
  sections: JSON
}

type Page_heroPreamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input PageWhereUniqueInput {
  id: ID
  slug: String
}

input PageWhereInput {
  AND: [PageWhereInput!]
  OR: [PageWhereInput!]
  NOT: [PageWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  ctaOneAnchorText: StringFilter
  ctaTwoUrlAnchorText: StringFilter
  status: StringFilter
}

input PageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  ctaOneAnchorText: OrderDirection
  ctaTwoUrlAnchorText: OrderDirection
  status: OrderDirection
}

input PageUpdateInput {
  title: String
  slug: String
  heroPreamble: JSON
  ctaOneAnchorText: String
  ctaOneUrl: JSON
  ctaTwoUrlAnchorText: String
  ctaTwoUrl: JSON
  status: String
  sections: JSON
}

input PageUpdateArgs {
  where: PageWhereUniqueInput!
  data: PageUpdateInput!
}

input PageCreateInput {
  title: String
  slug: String
  heroPreamble: JSON
  ctaOneAnchorText: String
  ctaOneUrl: JSON
  ctaTwoUrlAnchorText: String
  ctaTwoUrl: JSON
  status: String
  sections: JSON
}

type FrontPage {
  id: ID!
  heroTitle: String
  heroPreamble: FrontPage_heroPreamble_Document
  heroVideo: JSON
  ctaOneAnchorText: String
  ctaOneUrl: JSON
  ctaTwoUrlAnchorText: String
  ctaTwoUrl: JSON
  status: String
  sections: JSON
}

type FrontPage_heroPreamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input FrontPageWhereUniqueInput {
  id: ID
}

input FrontPageWhereInput {
  AND: [FrontPageWhereInput!]
  OR: [FrontPageWhereInput!]
  NOT: [FrontPageWhereInput!]
  id: IDFilter
  heroTitle: StringFilter
  ctaOneAnchorText: StringFilter
  ctaTwoUrlAnchorText: StringFilter
  status: StringFilter
}

input FrontPageOrderByInput {
  id: OrderDirection
  heroTitle: OrderDirection
  ctaOneAnchorText: OrderDirection
  ctaTwoUrlAnchorText: OrderDirection
  status: OrderDirection
}

input FrontPageUpdateInput {
  heroTitle: String
  heroPreamble: JSON
  heroVideo: JSON
  ctaOneAnchorText: String
  ctaOneUrl: JSON
  ctaTwoUrlAnchorText: String
  ctaTwoUrl: JSON
  status: String
  sections: JSON
}

input FrontPageUpdateArgs {
  where: FrontPageWhereUniqueInput! = {id: 1}
  data: FrontPageUpdateInput!
}

input FrontPageCreateInput {
  heroTitle: String
  heroPreamble: JSON
  heroVideo: JSON
  ctaOneAnchorText: String
  ctaOneUrl: JSON
  ctaTwoUrlAnchorText: String
  ctaTwoUrl: JSON
  status: String
  sections: JSON
}

type FooterBanner {
  id: ID!
  title: String
  preamble: FooterBanner_preamble_Document
}

type FooterBanner_preamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input FooterBannerWhereUniqueInput {
  id: ID
}

input FooterBannerWhereInput {
  AND: [FooterBannerWhereInput!]
  OR: [FooterBannerWhereInput!]
  NOT: [FooterBannerWhereInput!]
  id: IDFilter
  title: StringFilter
}

input FooterBannerOrderByInput {
  id: OrderDirection
  title: OrderDirection
}

input FooterBannerUpdateInput {
  title: String
  preamble: JSON
}

input FooterBannerUpdateArgs {
  where: FooterBannerWhereUniqueInput! = {id: 1}
  data: FooterBannerUpdateInput!
}

input FooterBannerCreateInput {
  title: String
  preamble: JSON
}

type FormEmail {
  id: ID!
  contactEmail: String
  shareStoryEmail: String
  joinSlackEmail: String
}

input FormEmailWhereUniqueInput {
  id: ID
}

input FormEmailWhereInput {
  AND: [FormEmailWhereInput!]
  OR: [FormEmailWhereInput!]
  NOT: [FormEmailWhereInput!]
  id: IDFilter
  contactEmail: StringFilter
  shareStoryEmail: StringFilter
  joinSlackEmail: StringFilter
}

input FormEmailOrderByInput {
  id: OrderDirection
  contactEmail: OrderDirection
  shareStoryEmail: OrderDirection
  joinSlackEmail: OrderDirection
}

input FormEmailUpdateInput {
  contactEmail: String
  shareStoryEmail: String
  joinSlackEmail: String
}

input FormEmailUpdateArgs {
  where: FormEmailWhereUniqueInput! = {id: 1}
  data: FormEmailUpdateInput!
}

input FormEmailCreateInput {
  contactEmail: String
  shareStoryEmail: String
  joinSlackEmail: String
}

type FooterJoinUs {
  id: ID!
  url1: String
  icon1: JSON
  url2: String
  icon2: JSON
  url3: String
  icon3: JSON
  url4: String
  icon4: JSON
}

input FooterJoinUsWhereUniqueInput {
  id: ID
}

input FooterJoinUsWhereInput {
  AND: [FooterJoinUsWhereInput!]
  OR: [FooterJoinUsWhereInput!]
  NOT: [FooterJoinUsWhereInput!]
  id: IDFilter
  url1: StringFilter
  url2: StringFilter
  url3: StringFilter
  url4: StringFilter
}

input FooterJoinUsOrderByInput {
  id: OrderDirection
  url1: OrderDirection
  url2: OrderDirection
  url3: OrderDirection
  url4: OrderDirection
}

input FooterJoinUsUpdateInput {
  url1: String
  icon1: JSON
  url2: String
  icon2: JSON
  url3: String
  icon3: JSON
  url4: String
  icon4: JSON
}

input FooterJoinUsUpdateArgs {
  where: FooterJoinUsWhereUniqueInput! = {id: 1}
  data: FooterJoinUsUpdateInput!
}

input FooterJoinUsCreateInput {
  url1: String
  icon1: JSON
  url2: String
  icon2: JSON
  url3: String
  icon3: JSON
  url4: String
  icon4: JSON
}

type MainMenu {
  id: ID!
  navigation: JSON
  ctaAnchorText: String
  ctaUrl: JSON
}

input MainMenuWhereUniqueInput {
  id: ID
}

input MainMenuWhereInput {
  AND: [MainMenuWhereInput!]
  OR: [MainMenuWhereInput!]
  NOT: [MainMenuWhereInput!]
  id: IDFilter
  ctaAnchorText: StringFilter
}

input MainMenuOrderByInput {
  id: OrderDirection
  ctaAnchorText: OrderDirection
}

input MainMenuUpdateInput {
  navigation: JSON
  ctaAnchorText: String
  ctaUrl: JSON
}

input MainMenuUpdateArgs {
  where: MainMenuWhereUniqueInput! = {id: 1}
  data: MainMenuUpdateInput!
}

input MainMenuCreateInput {
  navigation: JSON
  ctaAnchorText: String
  ctaUrl: JSON
}

type FooterMenu {
  id: ID!
  navigation: JSON
}

input FooterMenuWhereUniqueInput {
  id: ID
}

input FooterMenuWhereInput {
  AND: [FooterMenuWhereInput!]
  OR: [FooterMenuWhereInput!]
  NOT: [FooterMenuWhereInput!]
  id: IDFilter
}

input FooterMenuOrderByInput {
  id: OrderDirection
}

input FooterMenuUpdateInput {
  navigation: JSON
}

input FooterMenuUpdateArgs {
  where: FooterMenuWhereUniqueInput! = {id: 1}
  data: FooterMenuUpdateInput!
}

input FooterMenuCreateInput {
  navigation: JSON
}

type News {
  id: ID!
  title: String
  slug: String
  newsCategory: NewsCategory
  relatedChapters(where: ChapterWhereInput! = {}, orderBy: [ChapterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChapterWhereUniqueInput): [Chapter!]
  relatedChaptersCount(where: ChapterWhereInput! = {}): Int
  image: JSON
  status: String
  sections: JSON
  createdAt: DateTime
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input NewsWhereUniqueInput {
  id: ID
  title: String
  slug: String
}

input NewsWhereInput {
  AND: [NewsWhereInput!]
  OR: [NewsWhereInput!]
  NOT: [NewsWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  newsCategory: NewsCategoryWhereInput
  relatedChapters: ChapterManyRelationFilter
  status: StringFilter
  createdAt: DateTimeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input NewsOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input NewsUpdateInput {
  title: String
  slug: String
  newsCategory: NewsCategoryRelateToOneForUpdateInput
  relatedChapters: ChapterRelateToManyForUpdateInput
  image: JSON
  status: String
  sections: JSON
  createdAt: DateTime
}

input NewsCategoryRelateToOneForUpdateInput {
  create: NewsCategoryCreateInput
  connect: NewsCategoryWhereUniqueInput
  disconnect: Boolean
}

input NewsUpdateArgs {
  where: NewsWhereUniqueInput!
  data: NewsUpdateInput!
}

input NewsCreateInput {
  title: String
  slug: String
  newsCategory: NewsCategoryRelateToOneForCreateInput
  relatedChapters: ChapterRelateToManyForCreateInput
  image: JSON
  status: String
  sections: JSON
  createdAt: DateTime
}

input NewsCategoryRelateToOneForCreateInput {
  create: NewsCategoryCreateInput
  connect: NewsCategoryWhereUniqueInput
}

type NewsCategory {
  id: ID!
  categoryTitle: String
  createdAt: DateTime
  relatedNews(where: NewsWhereInput! = {}, orderBy: [NewsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsWhereUniqueInput): [News!]
  relatedNewsCount(where: NewsWhereInput! = {}): Int
}

input NewsCategoryWhereUniqueInput {
  id: ID
  categoryTitle: String
}

input NewsCategoryWhereInput {
  AND: [NewsCategoryWhereInput!]
  OR: [NewsCategoryWhereInput!]
  NOT: [NewsCategoryWhereInput!]
  id: IDFilter
  categoryTitle: StringFilter
  createdAt: DateTimeNullableFilter
  relatedNews: NewsManyRelationFilter
}

input NewsManyRelationFilter {
  every: NewsWhereInput
  some: NewsWhereInput
  none: NewsWhereInput
}

input NewsCategoryOrderByInput {
  id: OrderDirection
  categoryTitle: OrderDirection
  createdAt: OrderDirection
}

input NewsCategoryUpdateInput {
  categoryTitle: String
  createdAt: DateTime
  relatedNews: NewsRelateToManyForUpdateInput
}

input NewsRelateToManyForUpdateInput {
  disconnect: [NewsWhereUniqueInput!]
  set: [NewsWhereUniqueInput!]
  create: [NewsCreateInput!]
  connect: [NewsWhereUniqueInput!]
}

input NewsCategoryUpdateArgs {
  where: NewsCategoryWhereUniqueInput!
  data: NewsCategoryUpdateInput!
}

input NewsCategoryCreateInput {
  categoryTitle: String
  createdAt: DateTime
  relatedNews: NewsRelateToManyForCreateInput
}

input NewsRelateToManyForCreateInput {
  create: [NewsCreateInput!]
  connect: [NewsWhereUniqueInput!]
}

type Resource {
  id: ID!
  title: String
  url: String
  image: JSON
  category: ResourceCategory
  resourceType: ResourceType
  createdAt: DateTime
}

input ResourceWhereUniqueInput {
  id: ID
  title: String
}

input ResourceWhereInput {
  AND: [ResourceWhereInput!]
  OR: [ResourceWhereInput!]
  NOT: [ResourceWhereInput!]
  id: IDFilter
  title: StringFilter
  url: StringFilter
  category: ResourceCategoryWhereInput
  resourceType: ResourceTypeWhereInput
  createdAt: DateTimeNullableFilter
}

input ResourceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  url: OrderDirection
  createdAt: OrderDirection
}

input ResourceUpdateInput {
  title: String
  url: String
  image: JSON
  category: ResourceCategoryRelateToOneForUpdateInput
  resourceType: ResourceTypeRelateToOneForUpdateInput
  createdAt: DateTime
}

input ResourceCategoryRelateToOneForUpdateInput {
  create: ResourceCategoryCreateInput
  connect: ResourceCategoryWhereUniqueInput
  disconnect: Boolean
}

input ResourceTypeRelateToOneForUpdateInput {
  create: ResourceTypeCreateInput
  connect: ResourceTypeWhereUniqueInput
  disconnect: Boolean
}

input ResourceUpdateArgs {
  where: ResourceWhereUniqueInput!
  data: ResourceUpdateInput!
}

input ResourceCreateInput {
  title: String
  url: String
  image: JSON
  category: ResourceCategoryRelateToOneForCreateInput
  resourceType: ResourceTypeRelateToOneForCreateInput
  createdAt: DateTime
}

input ResourceCategoryRelateToOneForCreateInput {
  create: ResourceCategoryCreateInput
  connect: ResourceCategoryWhereUniqueInput
}

input ResourceTypeRelateToOneForCreateInput {
  create: ResourceTypeCreateInput
  connect: ResourceTypeWhereUniqueInput
}

type ResourceCategory {
  id: ID!
  title: String
  createdAt: DateTime
  resources(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResourceWhereUniqueInput): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
}

input ResourceCategoryWhereUniqueInput {
  id: ID
  title: String
}

input ResourceCategoryWhereInput {
  AND: [ResourceCategoryWhereInput!]
  OR: [ResourceCategoryWhereInput!]
  NOT: [ResourceCategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  createdAt: DateTimeNullableFilter
  resources: ResourceManyRelationFilter
}

input ResourceManyRelationFilter {
  every: ResourceWhereInput
  some: ResourceWhereInput
  none: ResourceWhereInput
}

input ResourceCategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
}

input ResourceCategoryUpdateInput {
  title: String
  createdAt: DateTime
  resources: ResourceRelateToManyForUpdateInput
}

input ResourceRelateToManyForUpdateInput {
  disconnect: [ResourceWhereUniqueInput!]
  set: [ResourceWhereUniqueInput!]
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

input ResourceCategoryUpdateArgs {
  where: ResourceCategoryWhereUniqueInput!
  data: ResourceCategoryUpdateInput!
}

input ResourceCategoryCreateInput {
  title: String
  createdAt: DateTime
  resources: ResourceRelateToManyForCreateInput
}

input ResourceRelateToManyForCreateInput {
  create: [ResourceCreateInput!]
  connect: [ResourceWhereUniqueInput!]
}

type ResourceType {
  id: ID!
  type: String
  icon: JSON
  resources(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResourceWhereUniqueInput): [Resource!]
  resourcesCount(where: ResourceWhereInput! = {}): Int
}

input ResourceTypeWhereUniqueInput {
  id: ID
}

input ResourceTypeWhereInput {
  AND: [ResourceTypeWhereInput!]
  OR: [ResourceTypeWhereInput!]
  NOT: [ResourceTypeWhereInput!]
  id: IDFilter
  type: StringFilter
  resources: ResourceManyRelationFilter
}

input ResourceTypeOrderByInput {
  id: OrderDirection
  type: OrderDirection
}

input ResourceTypeUpdateInput {
  type: String
  icon: JSON
  resources: ResourceRelateToManyForUpdateInput
}

input ResourceTypeUpdateArgs {
  where: ResourceTypeWhereUniqueInput!
  data: ResourceTypeUpdateInput!
}

input ResourceTypeCreateInput {
  type: String
  icon: JSON
  resources: ResourceRelateToManyForCreateInput
}

type Image {
  id: ID!
  title: String
  altText: String
  file: ImageFieldOutput
  createdAt: DateTime
  size: Int
  url: String
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  title: StringFilter
  altText: StringFilter
  createdAt: DateTimeNullableFilter
  size: IntNullableFilter
  url: StringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ImageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  altText: OrderDirection
  createdAt: OrderDirection
  size: OrderDirection
  url: OrderDirection
}

input ImageUpdateInput {
  title: String
  altText: String
  file: ImageFieldInput
  createdAt: DateTime
  size: Int
  url: String
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  title: String
  altText: String
  file: ImageFieldInput
  createdAt: DateTime
  size: Int
  url: String
}

type Video {
  id: ID!
  title: String
  altText: String
  file: FileFieldOutput
  createdAt: DateTime
  size: Int
  thumbnailUrl: String
  url: String
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

input VideoWhereUniqueInput {
  id: ID
}

input VideoWhereInput {
  AND: [VideoWhereInput!]
  OR: [VideoWhereInput!]
  NOT: [VideoWhereInput!]
  id: IDFilter
  title: StringFilter
  altText: StringFilter
  createdAt: DateTimeNullableFilter
  size: IntNullableFilter
  thumbnailUrl: StringFilter
  url: StringFilter
}

input VideoOrderByInput {
  id: OrderDirection
  title: OrderDirection
  altText: OrderDirection
  createdAt: OrderDirection
  size: OrderDirection
  thumbnailUrl: OrderDirection
  url: OrderDirection
}

input VideoUpdateInput {
  title: String
  altText: String
  file: FileFieldInput
  createdAt: DateTime
  size: Int
  thumbnailUrl: String
  url: String
}

input FileFieldInput {
  upload: Upload!
}

input VideoUpdateArgs {
  where: VideoWhereUniqueInput!
  data: VideoUpdateInput!
}

input VideoCreateInput {
  title: String
  altText: String
  file: FileFieldInput
  createdAt: DateTime
  size: Int
  thumbnailUrl: String
  url: String
}

type Principle {
  id: ID!
  title: String
  slug: String
  subHeader: String
  quote: String
  quoteAuthor: String
  image: JSON
  subPrinciples: JSON
  resources: JSON
  principleCategory(where: PrincipleCategoryWhereInput! = {}, orderBy: [PrincipleCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PrincipleCategoryWhereUniqueInput): [PrincipleCategory!]
  principleCategoryCount(where: PrincipleCategoryWhereInput! = {}): Int
  principleNumber: PrincipleNumber
  status: String
}

input PrincipleWhereUniqueInput {
  id: ID
  slug: String
}

input PrincipleWhereInput {
  AND: [PrincipleWhereInput!]
  OR: [PrincipleWhereInput!]
  NOT: [PrincipleWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  subHeader: StringFilter
  quote: StringFilter
  quoteAuthor: StringFilter
  principleCategory: PrincipleCategoryManyRelationFilter
  principleNumber: PrincipleNumberWhereInput
  status: StringFilter
}

input PrincipleCategoryManyRelationFilter {
  every: PrincipleCategoryWhereInput
  some: PrincipleCategoryWhereInput
  none: PrincipleCategoryWhereInput
}

input PrincipleOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  subHeader: OrderDirection
  quote: OrderDirection
  quoteAuthor: OrderDirection
  status: OrderDirection
}

input PrincipleUpdateInput {
  title: String
  slug: String
  subHeader: String
  quote: String
  quoteAuthor: String
  image: JSON
  subPrinciples: JSON
  resources: JSON
  principleCategory: PrincipleCategoryRelateToManyForUpdateInput
  principleNumber: PrincipleNumberRelateToOneForUpdateInput
  status: String
}

input PrincipleCategoryRelateToManyForUpdateInput {
  disconnect: [PrincipleCategoryWhereUniqueInput!]
  set: [PrincipleCategoryWhereUniqueInput!]
  create: [PrincipleCategoryCreateInput!]
  connect: [PrincipleCategoryWhereUniqueInput!]
}

input PrincipleNumberRelateToOneForUpdateInput {
  create: PrincipleNumberCreateInput
  connect: PrincipleNumberWhereUniqueInput
  disconnect: Boolean
}

input PrincipleUpdateArgs {
  where: PrincipleWhereUniqueInput!
  data: PrincipleUpdateInput!
}

input PrincipleCreateInput {
  title: String
  slug: String
  subHeader: String
  quote: String
  quoteAuthor: String
  image: JSON
  subPrinciples: JSON
  resources: JSON
  principleCategory: PrincipleCategoryRelateToManyForCreateInput
  principleNumber: PrincipleNumberRelateToOneForCreateInput
  status: String
}

input PrincipleCategoryRelateToManyForCreateInput {
  create: [PrincipleCategoryCreateInput!]
  connect: [PrincipleCategoryWhereUniqueInput!]
}

input PrincipleNumberRelateToOneForCreateInput {
  create: PrincipleNumberCreateInput
  connect: PrincipleNumberWhereUniqueInput
}

type PrincipleNumber {
  id: ID!
  number: Int
  principles: Principle
}

input PrincipleNumberWhereUniqueInput {
  id: ID
  number: Int
}

input PrincipleNumberWhereInput {
  AND: [PrincipleNumberWhereInput!]
  OR: [PrincipleNumberWhereInput!]
  NOT: [PrincipleNumberWhereInput!]
  id: IDFilter
  number: IntFilter
  principles: PrincipleWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input PrincipleNumberOrderByInput {
  id: OrderDirection
  number: OrderDirection
}

input PrincipleNumberUpdateInput {
  number: Int
  principles: PrincipleRelateToOneForUpdateInput
}

input PrincipleRelateToOneForUpdateInput {
  create: PrincipleCreateInput
  connect: PrincipleWhereUniqueInput
  disconnect: Boolean
}

input PrincipleNumberUpdateArgs {
  where: PrincipleNumberWhereUniqueInput!
  data: PrincipleNumberUpdateInput!
}

input PrincipleNumberCreateInput {
  number: Int
  principles: PrincipleRelateToOneForCreateInput
}

input PrincipleRelateToOneForCreateInput {
  create: PrincipleCreateInput
  connect: PrincipleWhereUniqueInput
}

type PrincipleCategory {
  id: ID!
  title: String
  createdAt: DateTime
  principles(where: PrincipleWhereInput! = {}, orderBy: [PrincipleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PrincipleWhereUniqueInput): [Principle!]
  principlesCount(where: PrincipleWhereInput! = {}): Int
}

input PrincipleCategoryWhereUniqueInput {
  id: ID
  title: String
}

input PrincipleCategoryWhereInput {
  AND: [PrincipleCategoryWhereInput!]
  OR: [PrincipleCategoryWhereInput!]
  NOT: [PrincipleCategoryWhereInput!]
  id: IDFilter
  title: StringFilter
  createdAt: DateTimeNullableFilter
  principles: PrincipleManyRelationFilter
}

input PrincipleManyRelationFilter {
  every: PrincipleWhereInput
  some: PrincipleWhereInput
  none: PrincipleWhereInput
}

input PrincipleCategoryOrderByInput {
  id: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
}

input PrincipleCategoryUpdateInput {
  title: String
  createdAt: DateTime
  principles: PrincipleRelateToManyForUpdateInput
}

input PrincipleRelateToManyForUpdateInput {
  disconnect: [PrincipleWhereUniqueInput!]
  set: [PrincipleWhereUniqueInput!]
  create: [PrincipleCreateInput!]
  connect: [PrincipleWhereUniqueInput!]
}

input PrincipleCategoryUpdateArgs {
  where: PrincipleCategoryWhereUniqueInput!
  data: PrincipleCategoryUpdateInput!
}

input PrincipleCategoryCreateInput {
  title: String
  createdAt: DateTime
  principles: PrincipleRelateToManyForCreateInput
}

input PrincipleRelateToManyForCreateInput {
  create: [PrincipleCreateInput!]
  connect: [PrincipleWhereUniqueInput!]
}

type SteeringGroupMember {
  id: ID!
  fullName: String
  role: String
  city: String
  country: String
  image: JSON
  socialMediaUrl1: String
  socialMediaIcon1: JSON
  socialMediaUrl2: String
  socialMediaIcon2: JSON
  createdAt: DateTime
}

input SteeringGroupMemberWhereUniqueInput {
  id: ID
}

input SteeringGroupMemberWhereInput {
  AND: [SteeringGroupMemberWhereInput!]
  OR: [SteeringGroupMemberWhereInput!]
  NOT: [SteeringGroupMemberWhereInput!]
  id: IDFilter
  fullName: StringFilter
  role: StringFilter
  city: StringFilter
  country: StringFilter
  socialMediaUrl1: StringFilter
  socialMediaUrl2: StringFilter
  createdAt: DateTimeNullableFilter
}

input SteeringGroupMemberOrderByInput {
  id: OrderDirection
  fullName: OrderDirection
  role: OrderDirection
  city: OrderDirection
  country: OrderDirection
  socialMediaUrl1: OrderDirection
  socialMediaUrl2: OrderDirection
  createdAt: OrderDirection
}

input SteeringGroupMemberUpdateInput {
  fullName: String
  role: String
  city: String
  country: String
  image: JSON
  socialMediaUrl1: String
  socialMediaIcon1: JSON
  socialMediaUrl2: String
  socialMediaIcon2: JSON
  createdAt: DateTime
}

input SteeringGroupMemberUpdateArgs {
  where: SteeringGroupMemberWhereUniqueInput!
  data: SteeringGroupMemberUpdateInput!
}

input SteeringGroupMemberCreateInput {
  fullName: String
  role: String
  city: String
  country: String
  image: JSON
  socialMediaUrl1: String
  socialMediaIcon1: JSON
  socialMediaUrl2: String
  socialMediaIcon2: JSON
  createdAt: DateTime
}

type Case {
  id: ID!
  title: String
  slug: String
  preamble: Case_preamble_Document
  sections: JSON
  caseImage: JSON
  quote: String
  caseLink: JSON
  principles: JSON
  resources: JSON
  status: String
  createdAt: DateTime
}

type Case_preamble_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input CaseWhereUniqueInput {
  id: ID
  slug: String
}

input CaseWhereInput {
  AND: [CaseWhereInput!]
  OR: [CaseWhereInput!]
  NOT: [CaseWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  quote: StringFilter
  status: StringFilter
  createdAt: DateTimeNullableFilter
}

input CaseOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  quote: OrderDirection
  status: OrderDirection
  createdAt: OrderDirection
}

input CaseUpdateInput {
  title: String
  slug: String
  preamble: JSON
  sections: JSON
  caseImage: JSON
  quote: String
  caseLink: JSON
  principles: JSON
  resources: JSON
  status: String
  createdAt: DateTime
}

input CaseUpdateArgs {
  where: CaseWhereUniqueInput!
  data: CaseUpdateInput!
}

input CaseCreateInput {
  title: String
  slug: String
  preamble: JSON
  sections: JSON
  caseImage: JSON
  quote: String
  caseLink: JSON
  principles: JSON
  resources: JSON
  status: String
  createdAt: DateTime
}

type Test {
  id: ID!
  content: Test_content_Document
  sections: JSON
}

type Test_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input TestWhereUniqueInput {
  id: ID
}

input TestWhereInput {
  AND: [TestWhereInput!]
  OR: [TestWhereInput!]
  NOT: [TestWhereInput!]
  id: IDFilter
}

input TestOrderByInput {
  id: OrderDirection
}

input TestUpdateInput {
  content: JSON
  sections: JSON
}

input TestUpdateArgs {
  where: TestWhereUniqueInput!
  data: TestUpdateInput!
}

input TestCreateInput {
  content: JSON
  sections: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createChapter(data: ChapterCreateInput!): Chapter
  createChapters(data: [ChapterCreateInput!]!): [Chapter]
  updateChapter(where: ChapterWhereUniqueInput!, data: ChapterUpdateInput!): Chapter
  updateChapters(data: [ChapterUpdateArgs!]!): [Chapter]
  deleteChapter(where: ChapterWhereUniqueInput!): Chapter
  deleteChapters(where: [ChapterWhereUniqueInput!]!): [Chapter]
  createPage(data: PageCreateInput!): Page
  createPages(data: [PageCreateInput!]!): [Page]
  updatePage(where: PageWhereUniqueInput!, data: PageUpdateInput!): Page
  updatePages(data: [PageUpdateArgs!]!): [Page]
  deletePage(where: PageWhereUniqueInput!): Page
  deletePages(where: [PageWhereUniqueInput!]!): [Page]
  createFrontPage(data: FrontPageCreateInput!): FrontPage
  createFrontPages(data: [FrontPageCreateInput!]!): [FrontPage]
  updateFrontPage(where: FrontPageWhereUniqueInput! = {id: 1}, data: FrontPageUpdateInput!): FrontPage
  updateFrontPages(data: [FrontPageUpdateArgs!]!): [FrontPage]
  deleteFrontPage(where: FrontPageWhereUniqueInput! = {id: 1}): FrontPage
  deleteFrontPages(where: [FrontPageWhereUniqueInput!]!): [FrontPage]
  createFooterBanner(data: FooterBannerCreateInput!): FooterBanner
  createFooterBanners(data: [FooterBannerCreateInput!]!): [FooterBanner]
  updateFooterBanner(where: FooterBannerWhereUniqueInput! = {id: 1}, data: FooterBannerUpdateInput!): FooterBanner
  updateFooterBanners(data: [FooterBannerUpdateArgs!]!): [FooterBanner]
  deleteFooterBanner(where: FooterBannerWhereUniqueInput! = {id: 1}): FooterBanner
  deleteFooterBanners(where: [FooterBannerWhereUniqueInput!]!): [FooterBanner]
  createFormEmail(data: FormEmailCreateInput!): FormEmail
  createFormEmails(data: [FormEmailCreateInput!]!): [FormEmail]
  updateFormEmail(where: FormEmailWhereUniqueInput! = {id: 1}, data: FormEmailUpdateInput!): FormEmail
  updateFormEmails(data: [FormEmailUpdateArgs!]!): [FormEmail]
  deleteFormEmail(where: FormEmailWhereUniqueInput! = {id: 1}): FormEmail
  deleteFormEmails(where: [FormEmailWhereUniqueInput!]!): [FormEmail]
  createFooterJoinUs(data: FooterJoinUsCreateInput!): FooterJoinUs
  createFooterJoinuses(data: [FooterJoinUsCreateInput!]!): [FooterJoinUs]
  updateFooterJoinUs(where: FooterJoinUsWhereUniqueInput! = {id: 1}, data: FooterJoinUsUpdateInput!): FooterJoinUs
  updateFooterJoinuses(data: [FooterJoinUsUpdateArgs!]!): [FooterJoinUs]
  deleteFooterJoinUs(where: FooterJoinUsWhereUniqueInput! = {id: 1}): FooterJoinUs
  deleteFooterJoinuses(where: [FooterJoinUsWhereUniqueInput!]!): [FooterJoinUs]
  createMainMenu(data: MainMenuCreateInput!): MainMenu
  createMainMenus(data: [MainMenuCreateInput!]!): [MainMenu]
  updateMainMenu(where: MainMenuWhereUniqueInput! = {id: 1}, data: MainMenuUpdateInput!): MainMenu
  updateMainMenus(data: [MainMenuUpdateArgs!]!): [MainMenu]
  deleteMainMenu(where: MainMenuWhereUniqueInput! = {id: 1}): MainMenu
  deleteMainMenus(where: [MainMenuWhereUniqueInput!]!): [MainMenu]
  createFooterMenu(data: FooterMenuCreateInput!): FooterMenu
  createFooterMenus(data: [FooterMenuCreateInput!]!): [FooterMenu]
  updateFooterMenu(where: FooterMenuWhereUniqueInput! = {id: 1}, data: FooterMenuUpdateInput!): FooterMenu
  updateFooterMenus(data: [FooterMenuUpdateArgs!]!): [FooterMenu]
  deleteFooterMenu(where: FooterMenuWhereUniqueInput! = {id: 1}): FooterMenu
  deleteFooterMenus(where: [FooterMenuWhereUniqueInput!]!): [FooterMenu]
  createNews(data: NewsCreateInput!): News
  createNewsItems(data: [NewsCreateInput!]!): [News]
  updateNews(where: NewsWhereUniqueInput!, data: NewsUpdateInput!): News
  updateNewsItems(data: [NewsUpdateArgs!]!): [News]
  deleteNews(where: NewsWhereUniqueInput!): News
  deleteNewsItems(where: [NewsWhereUniqueInput!]!): [News]
  createNewsCategory(data: NewsCategoryCreateInput!): NewsCategory
  createNewsCategories(data: [NewsCategoryCreateInput!]!): [NewsCategory]
  updateNewsCategory(where: NewsCategoryWhereUniqueInput!, data: NewsCategoryUpdateInput!): NewsCategory
  updateNewsCategories(data: [NewsCategoryUpdateArgs!]!): [NewsCategory]
  deleteNewsCategory(where: NewsCategoryWhereUniqueInput!): NewsCategory
  deleteNewsCategories(where: [NewsCategoryWhereUniqueInput!]!): [NewsCategory]
  createResource(data: ResourceCreateInput!): Resource
  createResources(data: [ResourceCreateInput!]!): [Resource]
  updateResource(where: ResourceWhereUniqueInput!, data: ResourceUpdateInput!): Resource
  updateResources(data: [ResourceUpdateArgs!]!): [Resource]
  deleteResource(where: ResourceWhereUniqueInput!): Resource
  deleteResources(where: [ResourceWhereUniqueInput!]!): [Resource]
  createResourceCategory(data: ResourceCategoryCreateInput!): ResourceCategory
  createResourceCategories(data: [ResourceCategoryCreateInput!]!): [ResourceCategory]
  updateResourceCategory(where: ResourceCategoryWhereUniqueInput!, data: ResourceCategoryUpdateInput!): ResourceCategory
  updateResourceCategories(data: [ResourceCategoryUpdateArgs!]!): [ResourceCategory]
  deleteResourceCategory(where: ResourceCategoryWhereUniqueInput!): ResourceCategory
  deleteResourceCategories(where: [ResourceCategoryWhereUniqueInput!]!): [ResourceCategory]
  createResourceType(data: ResourceTypeCreateInput!): ResourceType
  createResourceTypes(data: [ResourceTypeCreateInput!]!): [ResourceType]
  updateResourceType(where: ResourceTypeWhereUniqueInput!, data: ResourceTypeUpdateInput!): ResourceType
  updateResourceTypes(data: [ResourceTypeUpdateArgs!]!): [ResourceType]
  deleteResourceType(where: ResourceTypeWhereUniqueInput!): ResourceType
  deleteResourceTypes(where: [ResourceTypeWhereUniqueInput!]!): [ResourceType]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createVideo(data: VideoCreateInput!): Video
  createVideos(data: [VideoCreateInput!]!): [Video]
  updateVideo(where: VideoWhereUniqueInput!, data: VideoUpdateInput!): Video
  updateVideos(data: [VideoUpdateArgs!]!): [Video]
  deleteVideo(where: VideoWhereUniqueInput!): Video
  deleteVideos(where: [VideoWhereUniqueInput!]!): [Video]
  createPrinciple(data: PrincipleCreateInput!): Principle
  createPrinciples(data: [PrincipleCreateInput!]!): [Principle]
  updatePrinciple(where: PrincipleWhereUniqueInput!, data: PrincipleUpdateInput!): Principle
  updatePrinciples(data: [PrincipleUpdateArgs!]!): [Principle]
  deletePrinciple(where: PrincipleWhereUniqueInput!): Principle
  deletePrinciples(where: [PrincipleWhereUniqueInput!]!): [Principle]
  createPrincipleNumber(data: PrincipleNumberCreateInput!): PrincipleNumber
  createPrincipleNumbers(data: [PrincipleNumberCreateInput!]!): [PrincipleNumber]
  updatePrincipleNumber(where: PrincipleNumberWhereUniqueInput!, data: PrincipleNumberUpdateInput!): PrincipleNumber
  updatePrincipleNumbers(data: [PrincipleNumberUpdateArgs!]!): [PrincipleNumber]
  deletePrincipleNumber(where: PrincipleNumberWhereUniqueInput!): PrincipleNumber
  deletePrincipleNumbers(where: [PrincipleNumberWhereUniqueInput!]!): [PrincipleNumber]
  createPrincipleCategory(data: PrincipleCategoryCreateInput!): PrincipleCategory
  createPrincipleCategories(data: [PrincipleCategoryCreateInput!]!): [PrincipleCategory]
  updatePrincipleCategory(where: PrincipleCategoryWhereUniqueInput!, data: PrincipleCategoryUpdateInput!): PrincipleCategory
  updatePrincipleCategories(data: [PrincipleCategoryUpdateArgs!]!): [PrincipleCategory]
  deletePrincipleCategory(where: PrincipleCategoryWhereUniqueInput!): PrincipleCategory
  deletePrincipleCategories(where: [PrincipleCategoryWhereUniqueInput!]!): [PrincipleCategory]
  createSteeringGroupMember(data: SteeringGroupMemberCreateInput!): SteeringGroupMember
  createSteeringGroupMembers(data: [SteeringGroupMemberCreateInput!]!): [SteeringGroupMember]
  updateSteeringGroupMember(where: SteeringGroupMemberWhereUniqueInput!, data: SteeringGroupMemberUpdateInput!): SteeringGroupMember
  updateSteeringGroupMembers(data: [SteeringGroupMemberUpdateArgs!]!): [SteeringGroupMember]
  deleteSteeringGroupMember(where: SteeringGroupMemberWhereUniqueInput!): SteeringGroupMember
  deleteSteeringGroupMembers(where: [SteeringGroupMemberWhereUniqueInput!]!): [SteeringGroupMember]
  createCase(data: CaseCreateInput!): Case
  createCases(data: [CaseCreateInput!]!): [Case]
  updateCase(where: CaseWhereUniqueInput!, data: CaseUpdateInput!): Case
  updateCases(data: [CaseUpdateArgs!]!): [Case]
  deleteCase(where: CaseWhereUniqueInput!): Case
  deleteCases(where: [CaseWhereUniqueInput!]!): [Case]
  createTest(data: TestCreateInput!): Test
  createTests(data: [TestCreateInput!]!): [Test]
  updateTest(where: TestWhereUniqueInput!, data: TestUpdateInput!): Test
  updateTests(data: [TestUpdateArgs!]!): [Test]
  deleteTest(where: TestWhereUniqueInput!): Test
  deleteTests(where: [TestWhereUniqueInput!]!): [Test]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(where: RoleWhereInput! = {}, orderBy: [RoleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: RoleWhereUniqueInput): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  chapters(where: ChapterWhereInput! = {}, orderBy: [ChapterOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ChapterWhereUniqueInput): [Chapter!]
  chapter(where: ChapterWhereUniqueInput!): Chapter
  chaptersCount(where: ChapterWhereInput! = {}): Int
  pages(where: PageWhereInput! = {}, orderBy: [PageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PageWhereUniqueInput): [Page!]
  page(where: PageWhereUniqueInput!): Page
  pagesCount(where: PageWhereInput! = {}): Int
  frontPages(where: FrontPageWhereInput! = {id: {equals: 1}}, orderBy: [FrontPageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FrontPageWhereUniqueInput): [FrontPage!]
  frontPage(where: FrontPageWhereUniqueInput! = {id: 1}): FrontPage
  frontPagesCount(where: FrontPageWhereInput! = {id: {equals: 1}}): Int
  footerBanners(where: FooterBannerWhereInput! = {id: {equals: 1}}, orderBy: [FooterBannerOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FooterBannerWhereUniqueInput): [FooterBanner!]
  footerBanner(where: FooterBannerWhereUniqueInput! = {id: 1}): FooterBanner
  footerBannersCount(where: FooterBannerWhereInput! = {id: {equals: 1}}): Int
  formEmails(where: FormEmailWhereInput! = {id: {equals: 1}}, orderBy: [FormEmailOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FormEmailWhereUniqueInput): [FormEmail!]
  formEmail(where: FormEmailWhereUniqueInput! = {id: 1}): FormEmail
  formEmailsCount(where: FormEmailWhereInput! = {id: {equals: 1}}): Int
  footerJoinuses(where: FooterJoinUsWhereInput! = {id: {equals: 1}}, orderBy: [FooterJoinUsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FooterJoinUsWhereUniqueInput): [FooterJoinUs!]
  footerJoinUs(where: FooterJoinUsWhereUniqueInput! = {id: 1}): FooterJoinUs
  footerJoinusesCount(where: FooterJoinUsWhereInput! = {id: {equals: 1}}): Int
  mainMenus(where: MainMenuWhereInput! = {id: {equals: 1}}, orderBy: [MainMenuOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MainMenuWhereUniqueInput): [MainMenu!]
  mainMenu(where: MainMenuWhereUniqueInput! = {id: 1}): MainMenu
  mainMenusCount(where: MainMenuWhereInput! = {id: {equals: 1}}): Int
  footerMenus(where: FooterMenuWhereInput! = {id: {equals: 1}}, orderBy: [FooterMenuOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FooterMenuWhereUniqueInput): [FooterMenu!]
  footerMenu(where: FooterMenuWhereUniqueInput! = {id: 1}): FooterMenu
  footerMenusCount(where: FooterMenuWhereInput! = {id: {equals: 1}}): Int
  newsItems(where: NewsWhereInput! = {}, orderBy: [NewsOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsWhereUniqueInput): [News!]
  news(where: NewsWhereUniqueInput!): News
  newsItemsCount(where: NewsWhereInput! = {}): Int
  newsCategories(where: NewsCategoryWhereInput! = {}, orderBy: [NewsCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NewsCategoryWhereUniqueInput): [NewsCategory!]
  newsCategory(where: NewsCategoryWhereUniqueInput!): NewsCategory
  newsCategoriesCount(where: NewsCategoryWhereInput! = {}): Int
  resources(where: ResourceWhereInput! = {}, orderBy: [ResourceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResourceWhereUniqueInput): [Resource!]
  resource(where: ResourceWhereUniqueInput!): Resource
  resourcesCount(where: ResourceWhereInput! = {}): Int
  resourceCategories(where: ResourceCategoryWhereInput! = {}, orderBy: [ResourceCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResourceCategoryWhereUniqueInput): [ResourceCategory!]
  resourceCategory(where: ResourceCategoryWhereUniqueInput!): ResourceCategory
  resourceCategoriesCount(where: ResourceCategoryWhereInput! = {}): Int
  resourceTypes(where: ResourceTypeWhereInput! = {}, orderBy: [ResourceTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ResourceTypeWhereUniqueInput): [ResourceType!]
  resourceType(where: ResourceTypeWhereUniqueInput!): ResourceType
  resourceTypesCount(where: ResourceTypeWhereInput! = {}): Int
  images(where: ImageWhereInput! = {}, orderBy: [ImageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ImageWhereUniqueInput): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  videos(where: VideoWhereInput! = {}, orderBy: [VideoOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: VideoWhereUniqueInput): [Video!]
  video(where: VideoWhereUniqueInput!): Video
  videosCount(where: VideoWhereInput! = {}): Int
  principles(where: PrincipleWhereInput! = {}, orderBy: [PrincipleOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PrincipleWhereUniqueInput): [Principle!]
  principle(where: PrincipleWhereUniqueInput!): Principle
  principlesCount(where: PrincipleWhereInput! = {}): Int
  principleNumbers(where: PrincipleNumberWhereInput! = {}, orderBy: [PrincipleNumberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PrincipleNumberWhereUniqueInput): [PrincipleNumber!]
  principleNumber(where: PrincipleNumberWhereUniqueInput!): PrincipleNumber
  principleNumbersCount(where: PrincipleNumberWhereInput! = {}): Int
  principleCategories(where: PrincipleCategoryWhereInput! = {}, orderBy: [PrincipleCategoryOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PrincipleCategoryWhereUniqueInput): [PrincipleCategory!]
  principleCategory(where: PrincipleCategoryWhereUniqueInput!): PrincipleCategory
  principleCategoriesCount(where: PrincipleCategoryWhereInput! = {}): Int
  steeringGroupMembers(where: SteeringGroupMemberWhereInput! = {}, orderBy: [SteeringGroupMemberOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SteeringGroupMemberWhereUniqueInput): [SteeringGroupMember!]
  steeringGroupMember(where: SteeringGroupMemberWhereUniqueInput!): SteeringGroupMember
  steeringGroupMembersCount(where: SteeringGroupMemberWhereInput! = {}): Int
  cases(where: CaseWhereInput! = {}, orderBy: [CaseOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CaseWhereUniqueInput): [Case!]
  case(where: CaseWhereUniqueInput!): Case
  casesCount(where: CaseWhereInput! = {}): Int
  tests(where: TestWhereInput! = {}, orderBy: [TestOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: TestWhereUniqueInput): [Test!]
  test(where: TestWhereUniqueInput!): Test
  testsCount(where: TestWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
